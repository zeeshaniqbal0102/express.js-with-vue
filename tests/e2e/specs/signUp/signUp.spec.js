import {
  warnings,
  signUp,
  login,
  newOrganization,
} from '@Labels/tags'

// storing login and password for newly created user
let userEmail
// use of faker lib
const firstName = cy.faker.name.firstName()
const lastName = cy.faker.name.lastName()
const businessName = cy.faker.company.companyName()
const addressLine1 = cy.faker.address.streetAddress()
const addressLine2 = cy.faker.address.secondaryAddress()
const city = cy.faker.address.city()
const phoneNumber = cy.faker.phone.phoneNumberFormat()
const description = cy.faker.lorem.sentence()
const zipCode = cy.faker.address.zipCode()

beforeEach(() => {
  cy.eventHandler()
})

describe('signup test with process validation', () => {
  it('nav and validation input', () => {
    cy.visit('/')
    cy.wait(500)
    cy.get(login.signUp)
      .click()
    cy.wait(500)
    cy.url()
      .should('include', '/signup')
    cy.get(warnings.massage)
      .should('not.exist')
    cy.get(signUp.nextBtn)
      .click()
    cy.get(warnings.massage)
      .should('have.length', 3)
      .and('be.visible')
    cy.get(signUp.firstName)
      .type('Validation')
      .should('have.value', 'Validation')
    cy.get(signUp.lastName)
      .type('Validation')
      .should('have.value', 'Validation')
    cy.get(signUp.email)
      .type('INVALID EMAIL')
      .should('have.value', 'INVALID EMAIL')
    cy.get(warnings.massage)
      .should('have.length', 2)
      .and('be.visible')
    cy.get(signUp.email)
      .clear()
      .type('version4@cellsmart.biz')
    cy.get(warnings.massage)
      .should('have.length', 1)
      .and('be.visible')
    cy.get(signUp.password)
      .type('123')
      .should('have.value', '123')
    cy.get(warnings.massage)
      .should('have.length', 2)
      .and('be.visible')
    cy.get(signUp.password)
      .clear()
      .type('123456')
    cy.get(warnings.massage)
      .should('have.length', 1)
      .and('be.visible')
    cy.get(signUp.confirmPassword)
      .type('PasswordDoesNotMatch')
      .should('have.value', 'PasswordDoesNotMatch')
    cy.get(warnings.massage)
      .should('have.length', 1)
      .and('be.visible')
    cy.get(signUp.confirmPassword)
      .clear()
      .type('123456')
    cy.wait(200)
    cy.get(warnings.massage)
      .should('not.exist')
    cy.get(signUp.signInBtn)
      .click()
    cy.url()
      .should('include', '/login')
  })
  it('positive test signup', () => {
    cy.visit('/signup')
    cy.wait(500)
    cy.get(signUp.firstName)
      .type(firstName)
    cy.get(signUp.lastName)
      .type(lastName)
    cy.generateRandomString(5)
      .then((generateRandomString) => {
        cy.get(signUp.email)
          .type(`${generateRandomString}@cellsmarttest.biz`)
        userEmail = `${generateRandomString}@cellsmarttest.biz`
      })
    cy.get(signUp.password)
      .type(Cypress.env('password'))
    cy.get(signUp.confirmPassword)
      .type(Cypress.env('password'))
    cy.get(signUp.nextBtn)
      .click()
    cy.get(signUp.resendEmail)
      .should('be.visible')
    cy.get(signUp.alreadySignUp)
      .click()
    cy.wait(500)
    cy.url()
      .should('include', '/login')
  })
})

describe('signup test with starter', () => {
  it('login with created user with validation', () => {
    cy.visit('/')
    cy.wait(500)
    cy.get(login.email)
      .type(userEmail)
    cy.get(login.password)
      .type(Cypress.env('password'))
    cy.get(login.submitBtn)
      .click()
    cy.wait(200)
    cy.url()
      .should('include', '/newOrganization')
    cy.generateRandomString(8)
      .then((generateRandomString) => {
        cy.get(newOrganization.name)
          .type(generateRandomString)
          .should('have.value', generateRandomString)
      })
    cy.generateRandomNumber(10)
      .then((generateRandomNumber) => {
        cy.get(newOrganization.phone)
          .type(generateRandomNumber)
        // Needs format check
      })
    cy.get(newOrganization.email)
      .type(userEmail)
      .should('have.value', userEmail)
    cy.get(newOrganization.continueBtn)
      .click()
    cy.wait(500)
    cy.get(newOrganization.stageTwo.back)
      .click()
    cy.wait(500)
    cy.get(newOrganization.continueBtn)
      .click()
    cy.wait(500)
    // Stage 2 continue
    cy.get(newOrganization.stageTwo.businessName)
      .type(businessName)
      .should('have.value', businessName)
    cy.get(newOrganization.stageTwo.website)
      .type('https://cellsmart.biz')
      .should('have.value', 'https://cellsmart.biz')
    cy.get(newOrganization.stageTwo.dcaLicense)
      .type('ABC12345')
      .should('have.value', 'ABC12345')
    cy.get(newOrganization.stageTwo.email)
      .type(userEmail)
      .should('have.value', userEmail)
    cy.get(newOrganization.stageTwo.type)
      .type('Ice Cream')
      .should('have.value', 'Ice Cream')
    cy.get(newOrganization.stageTwo.timeZone)
      .click()
      .type('(GMT-11:00) Pago Pago{Enter}')
      .should('have.value', '(GMT-11:00) Pago Pago')
    cy.get(newOrganization.stageTwo.addressType)
      .type('Business', {
        force: true,
      })
      .should('have.value', 'Business')
    cy.get(newOrganization.stageTwo.PhoneNumber)
      .type(phoneNumber, {
        force: true,
      })
      .should('have.value', phoneNumber)
    cy.get(newOrganization.stageTwo.addressLine1)
      .type(addressLine1, {
        force: true,
      })
      .should('have.value', addressLine1)
    cy.get(newOrganization.stageTwo.addressLine2)
      .type(addressLine2, {
        force: true,
      })
      .should('have.value', addressLine2)
    cy.get(newOrganization.stageTwo.city)
      .type(city, {
        force: true,
      })
      .should('have.value', city)
    cy.get(newOrganization.stageTwo.state)
      .click()
      .type('Alberta{Enter}')
      .should('have.value', 'Alberta')
    cy.get(newOrganization.stageTwo.zipCode)
      .type(zipCode, {
        force: true,
      })
      .should('have.value', zipCode)
    cy.get(newOrganization.stageTwo.country)
      .click()
      .type('Pakistan{Enter}')
      .should('have.value', 'Pakistan')
    cy.get(newOrganization.stageTwo.description)
      .type(description, {
        force: true,
      })
      .wait(1000)
      .should('have.value', description)
    cy.get(newOrganization.stageTwo.continue)
      .click()
    cy.wait(500)
    // Stage three
    cy.get(newOrganization.stageThree.back)
      .click()
    cy.get(newOrganization.stageTwo.continue)
      .click()
    cy.wait(500)
    cy.get(newOrganization.stageThree.plans)
      .should('have.length', 3)
      .first()
      .check({
        force: true,
      })
    cy.get(newOrganization.stageThree.create)
      .click()
    cy.wait(10000)
    cy.url()
      .should('include', '/location/dashboard')
  })
  it('check created customer going to dashboard', () => {
    cy.visit('/')
    cy.wait(500)
    cy.get(login.email)
      .type(userEmail)
    cy.get(login.password)
      .type(Cypress.env('password'))
    cy.get(login.submitBtn)
      .click()
    cy.wait(5000)
    cy.url()
      .should('include', '/location/dashboard')
  })
})
